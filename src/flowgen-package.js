const glob = require("fast-glob")
const { promises, ensureFile } = require("fs-extra")
const { readFile, writeFile } = promises
const { join, relative, resolve } = require("path")
const { compiler } = require("flowgen")
const { execSync } = require("child_process")

/**
 * @typedef {object} Options
 * @property {string} packageName The name of the package
 * @property {string | undefined} bundlePath Generate a bundle suitable for FlowTyped at this path
 * @property {string | undefined} typesInstallScript The install script used to install `@types/packageName`. By default
 *   npm install is used
 * @property {string | undefined} packageDir If given instead of installing `@types/packageName`, the types for this
 *   package are generated
 */

/**
 * Generate Flow types from @types package
 *
 * @param {Options} options See the above for the documentation of options
 */
async function flowgenPackage(givenOptions) {
  const options = givenOptions
  const { packageName } = options
  let packageDir
  if (!options.packageDir) {
    console.log(`Installing @types/${packageName}`)
    if (!options.typesInstallScript) {
      options.typesInstallScript = `npm install --save-dev @types/${packageName}`
    }
    execSync(options.typesInstallScript, {
      stdio: "inherit",
    })
    packageDir = resolve(`./node_modules/@types/${packageName}`)
    console.log(`Generating flow definitions for ${packageName} at ./node_modules/@types/${packageName}`)
  } else {
    packageDir = resolve(options.packageDir)
    console.log(`Generating flow definitions for ${packageName} at ${packageDir}`)
  }
  if (!options.bundlePath) {
    options.bundlePath = join(packageDir, `./${packageName}.js.flow`)
  }
  const filePaths = await glob(`**/*.d.ts`, {
    ignore: `${packageDir.replace(/\\/g, "/")}/**/node_modules/`,
    onlyFiles: true,
    cwd: packageDir,
    absolute: true,
  })
  if (filePaths.length === 0) {
    throw new Error(`No .d.ts files were found at ${packageDir}`)
  }
  const fileContents = await readFiles(filePaths)

  const writeFilePromises = []
  for (let iFile = 0, numFile = filePaths.length; iFile < numFile; iFile++) {
    const filePath = filePaths[iFile]
    const fileContent = fileContents[iFile]

    const outputFilePath = filePath.replace(/.d.ts$/, ".js.flow")
    let moduleName = join(packageName, relative(packageDir, outputFilePath)).replace(/\\/g, "/")
    // declare module the package itself instead of its index
    if (moduleName === `${packageName}/index.js`) {
      moduleName = packageName
    }

    let outputFileContent = transformImportRequire(fileContent)
    outputFileContent = compiler.compileDefinitionString(outputFileContent)

    outputFileContent = transformImportStar(outputFileContent)
    outputFileContent = transformImportNamed(outputFileContent)

    outputFileContent = wrapDeclareFile(outputFileContent, moduleName)

    fileContents[iFile] = outputFileContent

    writeFilePromises.push(writeFile(outputFilePath, outputFileContent))
  }
  await Promise.all(writeFilePromises)
  await bundleFiles(fileContents, options.bundlePath)
  return "Success"
}
exports.flowgenPackage = flowgenPackage

/**
 * @param {string[]} filesPaths The paths to the files
 * @returns {Promise<string[]>} The contents of the files
 */
function readFiles(filesPaths) {
  return Promise.all(filesPaths.map((filePath) => readFile(filePath, { encoding: "utf-8" })))
}

const importRequireRegex = /^\s*import\s*(\S*)\s*=\s*require\((.*)\);?\s*$/g

/**
 * Transform `import = require` to `import from`
 *
 * @param {string} fileContent
 */
function transformImportRequire(fileContent) {
  return fileContent.replace(importRequireRegex, "import $1 from $2;")
}

const importStarRegex = /^\s*import\s*\*\s*as\s*(\S*)\s*from\s*(.*)\s*;?\s*$/g

/**
 * Transform `import * as from ""` to `import typeof * as from ""`
 *
 * @param {string} fileContent
 */
function transformImportStar(fileContent) {
  return fileContent.replace(importStarRegex, "import typeof * as $1 from $2;")
}

const importNamedRegex = /^\s*import\s*{(.*)}\s*from\s*(.*)\s*;?\s*$/g

/**
 * Transform `import { } as from ""` to `import type {} * as from ""`
 *
 * @param {string} fileContent
 */
function transformImportNamed(fileContent) {
  return fileContent.replace(importNamedRegex, "import type $1 from $2;")
}

/**
 * Wrap the files generated by flowgen in declare module
 *
 * @param {string} fileContent
 * @param {string} moduleName The name of the module for that file
 */
function wrapDeclareFile(fileContent, moduleName) {
  return `declare module "${moduleName}" {
${indent(fileContent, 2)}
}`
}

/**
 * @param {string} fileContent The conent of a file
 * @param {number} indentLength The length of the indentation
 */
function indent(fileContent, indentLength) {
  return fileContent
    .split(/\n|\n\r/)
    .map((line) => (line !== "" ? `${" ".repeat(indentLength)}${line}` : line))
    .join("\n")
}

/**
 * Bundle the files
 *
 * @param {string[]} fileContents An array of file contents
 * @param {string} bundlePath Generate a bundle suitable for FlowTyped at this path
 */
async function bundleFiles(fileContents, bundlePath) {
  try {
    await ensureFile(bundlePath)
  } catch (err) {}
  const bundleContent = fileContents.join("\n\n")
  await writeFile(bundlePath, bundleContent)
}
